paste("Employee",as.character(1:10))
? runif
test_list <- list(one="1",two="2",three="3")
test_list[[1]]
test_list[1]
test_list$one
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(employees,40000,50000)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee",as.character(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(employees,40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adj <- runif(employees,-5000,10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
data.frame(employees,salaries,salary_adj,stringsAsFactors=FALSE)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
employee_salaries <- runif(employees,40000,50000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
data.frame(employees,employee_salaries,salary_adj,stringsAsFactors=FALSE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,employee_salaries,salary_adjustments,stringsAsFactors=FALSE)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(employees,-5000,10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,employee_salaries,salary_adjustments,stringsAsFactors=FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_for_2018 <- employee_salaries + salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salary_adjustments > 0
length(c(1,2,3))
# How many employees got a raise?
print( salaries$got_raise[salaries$got_raise] )
# How many employees got a raise?
print( length(salaries$got_raise[salaries$got_raise]) )
max(salaries$salary_adjustments)
salaries$salary_adjustments == max(salaries$salary_adjustments)
# What was the dollar value of the highest raise?
print( max(salaries$salary_adjustments) )
salaries$employees[salaries$salary_adjustments == max(salaries$salary_adjustments)]
# What was the "name" of the employee who received the highest raise?
print( salaries$employees[salaries$salary_adjustments == max(salaries$salary_adjustments))] )
# What was the "name" of the employee who received the highest raise?
print( salaries$employees[salaries$salary_adjustments == max(salaries$salary_adjustments)] )
# What was the 2018 salary of Employee 57
print( salaries$employees[5] )
# What was the 2018 salary of Employee 57
print( salaries("employees","Employee 5") )
# What was the 2018 salary of Employee 57
print( salaries["employees","Employee 5"] )
# What was the 2018 salary of Employee 57
print( salaries["employees"] )
# What was the 2018 salary of Employee 57
print( salaries["employees","Employee 5"] )
# What was the 2018 salary of Employee 57
print( salaries$salary_for_2018[salaries$employees=="Employee 5"] )
salaries$salary_for_2018[5]
# What was the largest decrease in salaries between the two years?
print( min(salaries$salary_adjustments) )
# What was the name of the employee who recieved largest decrease in salary?
print( salaries$salary_adjustments==min(salaries$salary_adjustments) )
# What was the name of the employee who recieved largest decrease in salary?
print( salaries$employees[salaries$salary_adjustments==min(salaries$salary_adjustments)] )
# What was the name of the employee who recieved largest decrease in salary?
print( salaries$employees[salaries$salary_adjustments==min(salaries$salary_adjustments)] )
# What was the average salary change?
print( mean(salaries$salary_adjustments) )
# For people who did not get a raise, how much money did they lose on average?
salaries$salary_adjustments[salaries$salary_adjustments<=0]
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$salary_adjustments[salaries$salary_adjustments<=0])
# For people who did not get a raise, how much money did they lose on average?
print( mean(salaries$salary_adjustments[salaries$salary_adjustments<=0]) )
# Write a .csv file of your salary data to your working directory
write.csv(salaries,'salaries.csv')
? read.csv
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv',)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv')
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('../data/gates_money.csv')
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('./data/gates_money.csv')
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(file = 'data/gates_money.csv')
cd ..
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(file = "../'exercise2'data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(file = "../'exercise2'/data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(file = "../'exercise-4'/data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(file = "~/'INFO 201'/'Book Exer'/book-exercises/chapter-10-exercises/exercise-4/data/gates_money.csv")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(file = "data/gates_money.csv")
? cd
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(file = "data/gates_money.csv")
setwd("~/INFO 201/Book Exer/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(file = "data/gates_money.csv")
# Use the View function to look at the loaded data
view(grants)
? view
? View
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
View(grants)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(file = "data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
print( mean(grants$total_amount) )
# What was the dollar amount of the largest grant?
print( max(grants$total_amount) )
# What was the dollar amount of the smallest grant?
print( min(grants$total_amount) )
# Which organization received the largest grant?
print( grants$organization[grants$total_amount==max(grants$total_amount)] )
# Which organization received the smallest grant?
print( grants$organization[grants$total_amount==min(grants$total_amount)] )
# How many grants were awarded in 2010?
print( length(grants$organization) )
# How many grants were awarded in 2010?
print( length(grants$organization[grants$start_year=="2010"]) )
