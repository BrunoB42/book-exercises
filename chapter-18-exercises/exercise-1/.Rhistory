# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights,flight_delay=arr_delay-dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,flight_delay=arr_delay-dep_delay)
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights) #336776 rows
ncol(flights) #19 columns
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,in_air_delay=arr_delay-dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights,in_air_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights,-in_air_delay)
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights) #336776 rows
ncol(flights) #19 columns
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,in_air_delay=arr_delay-dep_delay)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights,in_air_delay=arr_delay-dep_delay) | arrange(flights,-in_air_delay)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights,avg=mean(in_air_delay,na.rm=TRUE))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$in_air_delay)
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights,in_air_delay))
select(flights,in_air_delay)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea_flights <- filter(flights,dest=="SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea_flights <- select(filter(flights,dest=="SEA"),origin,dest,in_air_delay)
# On average, did flights to SeaTac gain or loose time?
summarize(sea_flights,avg=mean(in_air_delay,na.rm=TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights,avg=mean(in_air_delay,na.rm=TRUE))
filter(flights,origin=="JFK",dest=="SEA")
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(flight,in_air_delay))
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(flights,in_air_delay))
filter(flights,origin=="JFK",dest=="SEA") %>% summarize(avg=mean(in_air_delay),min=min(in_air_delay),max=max(in_air_delay))
filter(flights,origin=="JFK",dest=="SEA")
filter(flights,origin=="JFK",dest=="SEA") %>%
summarize(avg=mean(in_air_delay),min=min(in_air_delay),max=max(in_air_delay))
filter(flights,origin=="JFK",dest=="SEA")
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,in_air_delay=arr_delay-dep_delay)
filter(flights,origin=="JFK",dest=="SEA") %>%
summarize(avg=mean(in_air_delay),min=min(in_air_delay),max=max(in_air_delay))
filter(flights,origin=="JFK",dest=="SEA") %>%
summarize(avg=mean(in_air_delay))
filter(flights,origin=="JFK",dest=="SEA") %>%
summarize()
filter(flights,origin=="JFK",dest=="SEA") %>%
summarize(avg=mean(in_air_delay,na.rm=TRUE),min=min(in_air_delay),max=max(in_air_delay))
filter(flights,origin=="JFK",dest=="SEA") %>%
summarize(avg=mean(in_air_delay,na.rm=TRUE),min=min(in_air_delay,na.rm=TRUE),max=max(in_air_delay,na.rm=TRUE))
library("knitr")
library("dplyr")
source("analysis.R")
actor_name <- "Tom Hanks"
actor_data <- get_actor_data(actor_name)
is.list(actor_data)
actor_data <- get_actor_data(actor_name)
actor_imdb_id <- actor_data$`imdb id`
actor_data$movies[1]
actor_data <- get_actor_data(actor_name)
actor_imdb_id <- actor_data$`imdb id`
actor_page_url <- paste0("https://www.imdb.com/name/", actor_imdb_id)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
install.packages('ggplot2')
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library('ggplot2')
library('dplyr')
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
diamonds
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds,1000)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library('ggplot2')
library('dplyr')
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
colnames(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds,1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price))
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price)) +
geom_point()
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price)) +
geom_point() +
scale_fill_grey()
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price)) +
geom_point() +
scale_fill_grey(start=0.2,end=0.8)
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price)) +
geom_point() +
scale_fill_grey(start=0.2,end=0.8,na.value = "red")
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price)) +
geom_point() +
scale_fill_grey(start=0.2,end=0.8,na.value = "red")
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price)) +
geom_point() +
scale_fill_grey(start=0.2,end=0.8,na.value = "clarity")
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price)) +
geom_point() +
scale_fill_grey(start=0.2,end=0.8,na.value = "clarity")
# Draw the same plot as above, but color each of the points based on their
# clarity.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price, colour=clarity)) +
geom_point()
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
ggplot(data = diamonds,mapping = aes(x=carat, y=price, colour=clarity)) +
geom_point()
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds,mapping = aes(x=carat, y=price), color=blue) +
geom_point()
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price), color="blue") +
geom_point()
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price)) +
geom_point(color="blue")
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price, shape=cut)) +
geom_point()
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample,mapping = aes(x=cut, y=carat, shape=price)) +
geom_point()
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
ggplot(data = diamonds_sample,mapping = aes(x=cut, y=carat, size=price)) +
geom_point()
# Try coloring the above plot based on the diamond's price!
ggplot(data = diamonds_sample,mapping = aes(x=cut, y=carat, size=price,color=price)) +
geom_point()
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price, color=cut)) +
geom_line()
# That's kind of messy. Try using `smooth` geometry instead.
ggplot(data = diamonds_sample,mapping = aes(x=carat, y=price, color=cut)) +
geom_smooth()
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
ggplot(data = diamonds_sample,mapping = aes(x=cut, y=price)) +
geom_col()
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample,mapping = aes(x=cut, y=price,fill=clarity)) +
geom_col()
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x=price, y=carat)) +
geom_smooth(mapping = aes(x=price, y=carat, color=cut))
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x=price, y=carat),alpha=0.3) +
geom_smooth(mapping = aes(x=price, y=carat, color=cut))
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library('ggplot2')
library('dplyr')
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x=price, y=carat),alpha=0.3) +
geom_smooth(mapping = aes(x=price, y=carat, color=cut))
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
ggplot(data = diamonds_sample,mapping = aes(x=cut, y=price,fill=clarity)) +
geom_col()
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x=price, y=carat),alpha=0.3) +
geom_smooth(mapping = aes(x=price, y=carat, color=cut))
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
double_cut <- ggplot(data = diamonds, mapping = aes(x=cut,fill=cut)) +
geom_bar()
# Draw the same chart, but with the coordinate system flipped
double_cut + coord_flip()
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
double_cut + coord_polar()
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds, mapping = aes(x=carat,y=price,color=clarity)) +
geom_point() +
facet_wrap(~color)
setwd("~/INFO 201/Book Exer/book-exercises/chapter-16-exercises/exercise-2")
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggsave()
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
ggsave(filename = "my-plot.png")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
setwd("~/INFO 201/Book Exer/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# load relevant libraries
library("httr")
library("jsonlite")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Thor"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
query_params <- list("api-key"=nyt_key,"movie_name"=movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
nyt_get <- fromJSON(content(GET(uri,query_params),"text"))
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Thor"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
query_params <- list("api-key"=nyt_key,"movie_name"=movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
nyt_get <- fromJSON(content(GET(uri,query_params),"text"))
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Thor"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
query_params <- list("api-key"=nyt_key,"movie_name"=movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
fromJSON(content(GET(uri,query_params),"text"))
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
GET(uri,query_params)
query_params
query_params <- list("api-key"=nyt_key,"query"=movie_name)
GET(uri,query_params)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
fromJSON(content(GET(uri,query_params),"text"))
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json?query=godfather&api-key=8RJsXcvi1NNcfcxM3hGhyNkn7bMS3x5W"
uri <- paste0(base_uri,endpoint)
query_params <- list("api-key"=nyt_key,"query"=movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
fromJSON(content(GET(uri),"text"))
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "godfather"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json?query=godfather&api-key=8RJsXcvi1NNcfcxM3hGhyNkn7bMS3x5W"
uri <- paste0(base_uri,endpoint)
query_params <- list("api-key"=nyt_key,"query"=movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
fromJSON(content(GET(uri),"text"))
query_params <- list("api-key"=nyt_key,"query"=movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri,endpoint)
query_params <- list("api-key"=nyt_key,"query"=movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
fromJSON(content(GET(uri,query_params),"text"))
query_params <- paste0("?query=",movie_name,"&api-key=",nyt_key)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
nyt_data <- fromJSON(content(GET(uri),"text"))
# load relevant libraries
library("httr")
library("jsonlite")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "godfather"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json?query=godfather&api-key=8RJsXcvi1NNcfcxM3hGhyNkn7bMS3x5W"
uri <- paste0(base_uri,endpoint)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
nyt_data <- fromJSON(content(GET(uri),"text"))
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
query_params <- paste0("?query=",movie_name,"&api-key=",nyt_key)
uri <- paste0(base_uri,endpoint,query_params)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
nyt_data <- fromJSON(content(GET(uri),"text"))
is.data.frame(nyt_data)
is.list(nyt_data)
View(nyt_data)
nyt_data$results
nyt_data$results$critics_pick
nyt_data$results$link
nyt_data$results$link
nyt_data$results$link[1]
nyt_data$results$link[2]
nyt_data$results$link[3]
nyt_data$results$link[2]
nyt_data$results$multimedia
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(nyt_data)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(nyt_data$results)
View(reviews)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
headline <- reviews$headline[1]
short_summary <- reviews$summary_short[1]
link <- reviews$link.url[1]
# Create a list of the three pieces of information from above.
# Print out the list.
movie_data_list <- list("Headline"=headline,"Short Summary"=short_summary,"Link"=link)
print(movie_data_list)
setwd("~/INFO 201/Book Exer/book-exercises/chapter-18-exercises/exercise-1")
source("exercise.R")
