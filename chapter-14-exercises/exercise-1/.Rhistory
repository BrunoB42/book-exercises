# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("httr")
library("jsonlite")
library("dplyr")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
print(GET(paste0(base_uri,org_resource)))
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
print(GET(paste0(base_uri,org_resource)))
? content
# Extract the content of the response using the `content()` function, saving it
# in a variable.
org_repo_get <- content(GET(paste0(base_uri,org_resource)))
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
print(GET(paste0(base_uri,org_resource)))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
org_repo_get <- content(GET(paste0(base_uri,org_resource)),"text")
# Convert the content variable from a JSON string into a data frame.
org_repo_get <- data.frame(org_repo_get)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
org_repo_get <- content(GET(paste0(base_uri,org_resource)),"text")
# Extract the content of the response using the `content()` function, saving it
# in a variable.
org_repo_get <- content(GET(paste0(base_uri,org_resource)),"text")
# Extract the content of the response using the `content()` function, saving it
# in a variable.
org_repo_get <- content(GET(paste0(base_uri,org_resource)))
# Convert the content variable from a JSON string into a data frame.
org_repo_get <- data.frame(org_repo_get)
# Convert the content variable from a JSON string into a data frame.
org_repo_get <- data.frame(org_repo_get)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
org_repo_get <- content(GET(paste0(base_uri,org_resource)),"text")
org_repo_get <- fromJSON(org_repo_get)
is.data.frame(org_repo_get)
View(org_repo_get)
# How many (public) repositories does the organization have?
print(nrow(org_repo_get))
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q="size:>500000",sort="stars")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
paste0(base_uri,search_endpoint,query_params)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories/"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q="size:>500000",sort="stars")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
paste0(base_uri,search_endpoint,query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri,search_endpoint),query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q="size:>500000",sort="stars")
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q="minecraft",sort="stars")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri,search_endpoint),query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri,search_endpoint))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri,search_endpoint),query=query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q="tetris",sort="stars")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri,search_endpoint),query=query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q="tetris",sort="stars")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri,search_endpoint),query=query_params)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q="tetris",sort="stars")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri,search_endpoint),query=query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q="minecraft",sort="stars")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(base_uri,search_endpoint),query=query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
github_minecraft_df <- fromJSON(GET(paste0(base_uri,search_endpoint),"text",query=query_params))
# Extract the content of the response and convert it from a JSON string into a
# data frame.
github_minecraft_df <- fromJSON(GET(paste0(base_uri,search_endpoint),query=query_params))
# Extract the content of the response and convert it from a JSON string into a
# data frame.
github_minecraft_df <- fromJSON(GET(paste0(base_uri,search_endpoint),query=query_params))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
org_repo_get <- content(GET(paste0(base_uri,org_resource)),"text")
# Convert the content variable from a JSON string into a data frame.
org_repo_get <- fromJSON(org_repo_get)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
github_minecraft_df <- fromJSON(GET(paste0(base_uri,search_endpoint),query=query_params,"text"))
? GET
# Extract the content of the response and convert it from a JSON string into a
# data frame.
github_minecraft_df <- fromJSON(content(GET(paste0(base_uri,search_endpoint),query=query_params)),"text")
# Extract the content of the response and convert it from a JSON string into a
# data frame.
github_minecraft_df <- fromJSON(content(GET(paste0(base_uri,search_endpoint),query=query_params),"text"))
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
print(github_minecraft_df$total_count)
# What are the full names of the top 5 repos in the search results?
print(github_minecraft_df$items$name)
# What are the full names of the top 5 repos in the search results?
print(github_minecraft_df$items$name[1:5])
